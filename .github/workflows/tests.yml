# TODOs:
# * Extend to TOX.
# * Extend to mac os
name: Run formatting and unit tests

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Display Python version
        run: python -c "import sys; print(sys.version)"

      # Can't use make command as it assumes a venv path - reconcile this
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install -e ".[dev]"

      - name: Check formatting
        run: make check-format

      # --cov-fail-under=-1 sets low code coverage from error to warning
      - name: Run unit tests with code cov
        run: pytest --junitxml=junit/test-results.xml --cov=src/ --cov-report=xml --cov-report=html --cov-fail-under=-1

      - name: "Upload coverage data"
        uses: actions/upload-artifact@v3
        with:
          name: "coverage-data"
          path: |
            coverage.*
            junit/test-results.xml
          if-no-files-found: ignore

  coverage:
    name: Combine and check coverage
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      # TODO(Alex) Should cache from prior step
      - name: Install dependencies
        run: |
          python -m pip install --upgrade coverage[toml]

      - name: Download coverage data
        uses: actions/download-artifact@v3
        with:
          name: coverage-data

      - name: Combine coverage
        run: |
          python -m coverage combine
          python -m coverage html --skip-covered --skip-empty

          # Report and write to summary.
          python -m coverage report | sed 's/^/    /' >> $GITHUB_STEP_SUMMARY

#         # Report again and fail if under 100%.
#          python -Im coverage report --fail-under=100

      - name: Upload HTML report
        uses: actions/upload-artifact@v3
        with:
          name: html-report
          path: htmlcov
#        if: ${{ failure() }}

#      - name: "Create badge"
#        uses: schneegans/dynamic-badges-action@v1.6.0
#        with:
#          auth: ${{ secrets.GIST_TOKEN }}
#          gistID: YOUR_GIST_ID
#          filename: covbadge.json
#          label: Coverage
#          message: ${{ env.total }}%
#          minColorRange: 50
#          maxColorRange: 90
#          valColorRange: ${{ env.total }}
